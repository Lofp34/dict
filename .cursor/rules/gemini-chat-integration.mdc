# Int√©gration Chat Gemini - API Officielle

## üéØ **Objectif**
Int√©grer un syst√®me de chat interactif dans l'application Dict√©e Magique en utilisant l'API Gemini officielle pour permettre aux utilisateurs de dialoguer avec l'IA sur leurs notes sauvegard√©es.

## üìö **Documentation Officielle Google Gemini**

### **Import et Initialisation**
```typescript
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({});
```

### **Cr√©ation d'une Session de Chat**
```typescript
const chat = ai.chats.create({
  model: "gemini-2.5-flash",
  history: [
    {
      role: "user",
      parts: [{ text: "Hello" }],
    },
    {
      role: "model", 
      parts: [{ text: "Great to meet you. What would you like to know?" }],
    },
  ],
});
```

### **Envoi de Messages avec Streaming**
```typescript
const stream1 = await chat.sendMessageStream({
  message: "I have 2 dogs in my house.",
});

for await (const chunk of stream1) {
  console.log(chunk.text);
  console.log("_".repeat(80));
}
```

### **Conversation Continue**
```typescript
const stream2 = await chat.sendMessageStream({
  message: "How many paws are in my house?",
});

for await (const chunk of stream2) {
  console.log(chunk.text);
  console.log("_".repeat(80));
}
```

## üîß **Impl√©mentation dans l'Application**

### **1. Interface ChatMessage**
```typescript
interface ChatMessage {
  id: string;
  content: string;
  isUser: boolean;
  timestamp: Date;
  role?: "user" | "model";
  parts?: { text: string }[];
}
```

### **2. Gestion des Sessions de Chat**
- **Cr√©er une session de chat** pour chaque note sauvegard√©e
- **Maintenir l'historique** des conversations
- **G√©rer le streaming** des r√©ponses en temps r√©el
- **Sauvegarder les conversations** dans localStorage

### **3. Interface Utilisateur**
- **Bouton Chat** sur chaque note sauvegard√©e
- **Zone de chat** d√©pliable/r√©ductible
- **Input de message** avec bouton d'envoi
- **Affichage en temps r√©el** des r√©ponses streaming

### **4. Int√©gration avec les Notes**
- **Contexte de la note** : Note originale + suggestions
- **Historique persistant** : Sauvegarde des conversations
- **R√©ponses contextuelles** : IA bas√©e sur le contenu de la note

## üé® **Composants UI √† Cr√©er**

### **ChatButton**
- Ic√¥ne de chat (ChatIcon)
- Indicateur de nouveaux messages
- Toggle pour ouvrir/fermer le chat

### **ChatWindow**
- Zone d'affichage des messages
- Scroll automatique vers le bas
- Distinction visuelle user/IA

### **ChatInput**
- Zone de saisie de message
- Bouton d'envoi (SendIcon)
- Validation et gestion des erreurs

### **MessageBubble**
- Style diff√©rent pour user/IA
- Timestamp des messages
- Support du streaming en temps r√©el

## üîÑ **Workflow d'Int√©gration**

1. **Initialisation** : Cr√©er une session de chat lors de la sauvegarde d'une note
2. **Ouverture** : Afficher l'interface de chat quand l'utilisateur clique sur le bouton
3. **Envoi** : Capturer le message utilisateur et l'envoyer via `chat.sendMessageStream()`
4. **R√©ception** : Afficher la r√©ponse en streaming en temps r√©el
5. **Sauvegarde** : Persister l'historique de conversation

## üìù **Exemple d'Impl√©mentation**

```typescript
const handleSendChatMessage = async (noteId: string, message: string) => {
  // Cr√©er ou r√©cup√©rer la session de chat
  const chat = ai.chats.create({
    model: "gemini-2.5-flash",
    history: getChatHistory(noteId)
  });

  // Envoyer le message avec streaming
  const stream = await chat.sendMessageStream({
    message: message
  });

  // Afficher la r√©ponse en temps r√©el
  for await (const chunk of stream) {
    updateChatMessage(noteId, chunk.text);
  }
};
```

## ‚ö†Ô∏è **Points d'Attention**

- **Gestion des erreurs** : Timeout, erreurs r√©seau, API indisponible
- **Performance** : Limiter le nombre de sessions de chat actives
- **S√©curit√©** : Validation des messages utilisateur
- **UX** : Feedback visuel pendant le streaming
- **Persistance** : Sauvegarde automatique de l'historique

## üéØ **Avantages de cette Approche**

1. **Conversation naturelle** : L'IA se souvient du contexte
2. **R√©ponses en temps r√©el** : Streaming pour une meilleure UX
3. **Historique persistant** : Conversations sauvegard√©es
4. **Contexte riche** : IA bas√©e sur la note originale
5. **API officielle** : Support et stabilit√© garantis
description:
globs:
alwaysApply: false
---
